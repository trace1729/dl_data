[
    {
      "question": "module arbiter(\n  input clk,\n  input [3:0] requests,\n  output reg [3:0] grant\n);\n  always @(posedge clk) begin\n    if (requests[0]) grant <= 4'b0001;\n    else if (requests[1]) grant <= 4'b0010;\n    else if (requests[2]) grant <= 4'b0100;\n    else if (requests[3]) grant <= 4'b1000;\n  end\nendmodule",
      "answer": {
        "Performance": "Replace priority encoder with parallel casez statement:\ncasez(requests)\n  4'b???1: grant <= 4'b0001;\n  4'b??10: grant <= 4'b0010;\n  ...\nReduces critical path from O(n) to O(1)",
        "Power": "Add request valid registers to gate unnecessary switching",
        "Area": "Use shared priority logic for multiple arbiters"
      }
    },
    {
      "question": "module fsm(\n  input clk, rst,\n  input [1:0] status,\n  output reg [2:0] ctrl\n);\n  reg [1:0] state;\n  always @(posedge clk) begin\n    case(state)\n      2'b00: if(status[0]) state <= 2'b01;\n      2'b01: begin\n        ctrl <= 3'b101;\n        if(status[1]) state <= 2'b10;\n      end\n      // ... more states\n    endcase\n  end\nendmodule",
      "answer": {
        "Performance": "Implement one-hot encoding (reg [3:0] state):\n4'b0001, 4'b0010...\nReduces combinational logic depth",
        "Power": "Separate output generation to different always block with clock gating",
        "Area": "Share common transition logic between states"
      }
    },
    {
      "question": "module fifo(\n  input clk,\n  input [7:0] data_in,\n  output reg [7:0] data_out\n);\n  reg [7:0] mem[15:0];\n  reg [4:0] wptr, rptr;\n  \n  always @(posedge clk) begin\n    if (wptr[4] != rptr[4] || wptr[3:0] != rptr[3:0]) begin\n      mem[wptr[3:0]] <= data_in;\n      wptr <= wptr + 5'b1;\n    end\n  end\nendmodule",
      "answer": {
        "Performance": "Use Gray code for pointers:\nwptr_gray = wptr ^ (wptr >> 1)\nEliminates full adder in pointer comparison",
        "Power": "Add write enable signal to prevent unnecessary memory writes",
        "Area": "Optimize pointer width using parametric design"
      }
    },
    {
      "question": "module memory_ctrl(\n  input clk,\n  input [15:0] addr,\n  output reg [31:0] data\n);\n  reg [3:0] bank_sel;\n  always @(*) begin\n    bank_sel = addr[3:0];\n    data = mem_array[bank_sel][addr[15:4]];\n  end\nendmodule",
      "answer": {
        "Performance": "Pipeline bank selection:\nAdd register stage for bank_sel\nReduces combinatorial path delay",
        "Power": "Implement bank power gating for inactive sections",
        "Area": "Share address decoder between multiple banks"
      }
    },
    {
      "question": "module priority_encoder(\n  input [7:0] req,\n  output reg [2:0] code\n);\n  always @(*) begin\n    if (req[7]) code = 3'b111;\n    else if (req[6]) code = 3'b110;\n    // ... similar for all bits\n  end\nendmodule",
      "answer": {
        "Performance": "Use parallel prefix architecture:\ncode = req[7] ? 3'b111 :\n       req[6] ? 3'b110 : ...",
        "Power": "Insert intermediate registers to break long combinatorial chains",
        "Area": "Use shared priority trees for multiple encoders"
      }
    },
    {
      "question": "module state_machine(\n  input clk,\n  input cond,\n  output reg out1, out2\n);\n  parameter S0=0, S1=1;\n  reg state;\n  \n  always @(posedge clk) begin\n    case(state)\n      S0: if(cond) state <= S1;\n      S1: begin\n        out1 <= 1'b1;\n        out2 <= ~cond;\n      end\n    endcase\n  end\nendmodule",
      "answer": {
        "Performance": "Separate output logic to parallel always blocks:\nalways_ff for state, always_comb for outputs",
        "Power": "Use clock gating for output registers when outputs stable",
        "Area": "Merge related output signals into packed registers"
      }
    },
    {
      "question": "module data_path(\n  input clk,\n  input [15:0] a, b,\n  output reg [31:0] result\n);\n  always @(posedge clk) begin\n    result <= a * b + (a << 4);\n  end\nendmodule",
      "answer": {
        "Performance": "Pipeline multiplier:\nStage1: a*b\nStage2: + (a<<4)\nDouble throughput",
        "Power": "Operand isolation for unused bits",
        "Area": "Share shifters between multiple operations"
      }
    },
    {
      "question": "module address_gen(\n  input clk,\n  output reg [19:0] addr\n);\n  always @(posedge clk) begin\n    addr <= addr + 20'h1;\n  end\nendmodule",
      "answer": {
        "Performance": "Implement burst addressing:\naddr <= addr + 4;\nAdd burst counter register",
        "Power": "Clock gate during idle periods",
        "Area": "Use carry look-ahead adder instead of ripple carry"
      }
    },
    {
      "question": "module bus_interface(\n  input clk,\n  inout [31:0] bus,\n  output reg ack\n);\n  reg [31:0] buffer;\n  always @(posedge clk) begin\n    if (!ack) begin\n      bus <= buffer;\n      ack <= 1'b1;\n    end\n  end\nendmodule",
      "answer": {
        "Performance": "Implement pre-driver stage:\nInternal buffer register -> pre-driver -> bus\nReduces bus settling time",
        "Power": "Tri-state bus when not in use",
        "Area": "Share bus buffers between multiple interfaces"
      }
    },
    {
      "question": "module pipeline(\n  input clk,\n  input [15:0] in,\n  output reg [15:0] out\n);\n  reg [15:0] s1, s2;\n  always @(posedge clk) begin\n    s1 <= in * 2;\n    s2 <= s1 + 5;\n    out <= s2 >> 1;\n  end\nendmodule",
      "answer": {
        "Performance": "Balance pipeline stages:\nAdd register after addition operation",
        "Power": "Clock gating for unused pipeline stages",
        "Area": "Merge arithmetic units where possible"
      }
    }
  ]